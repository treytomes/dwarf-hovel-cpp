name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Download Dependencies
      run: |
        Write-Output "Setting up SDL2.26.5..."
        Invoke-WebRequest -URI https://github.com/libsdl-org/SDL/releases/download/release-2.26.5/SDL2-devel-2.26.5-VC.zip -OutFile C:\Temp\SDL2-devel-2.26.5-VC.zip
        Expand-Archive C:\Temp\SDL2-devel-2.26.5-VC.zip -DestinationPath C:\
        Rename-Item -Path "C:\SDL2-2.26.5" -NewName "C:\SDL2"
        
        Write-Output "Setting up glew-2.1.0..."
        Invoke-WebRequest -URI https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip -OutFile C:\Temp\glew-2.2.0.zip
        Expand-Archive C:\Temp\glew-2.2.0.zip -DestinationPath C:\

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja
        
      # -DCMAKE_C_COMPILER=cl.exe -DCMAKE_CXX_COMPILER=cl.exe -DCMAKE_INSTALL_PREFIX=C:/Users/TreyTomes/projects/dwarf-hovel-cpp/out/install/x64-debug -SC:/Users/TreyTomes/projects/dwarf-hovel-cpp -BC:/Users/TreyTomes/projects/dwarf-hovel-cpp/out/build/x64-debug -G Ninja
        
      shell: powershell

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        dir ${{github.workspace}}/build/DwarfHovel/Release
        dir ${{github.workspace}}/build/
        dir ${{github.workspace}}/build/x64/Release/ALL_BUILD/
        dir ${{github.workspace}}/build/x64/Release/ZERO_CHECK/
      shell: powershell

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C ${{env.BUILD_TYPE}}
      shell: powershell
